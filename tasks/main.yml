#
# setup nginx
#

# TODO: get external IP
# - name: get host external IP
#   # See http://www.commandlinefu.com/commands/view/5427/get-your-external-ip-address
#   # for alternatives to this command
#   command: curl --silent --fail http://ifconfig.me/ip
#   register: host_external_ip
#   tags:
#     - nginx
#     - debug
#
# - set_fact: external_hostname="{{ host_external_ip.stdout }}"
#   tags:
#     - nginx
#     - debug

- name: install nginx repo
  yum_repository:
    name: nginx
    description: nginx repo
    baseurl: http://nginx.org/packages/mainline/centos/{{ ansible_distribution_major_version }}/$basearch/
    gpgcheck: no
  tags:
    - repo

- name: install nginx
  yum:
    name: nginx
    state: present
  tags:
    - repo

- name: install nginx modules
  yum:
    name: "{{ nginx_modules }}"
    state: present
  tags:
    - repo

- name: ensure httpd is stopped and disabled
  service:
    name: httpd
    state: stopped
    enabled: no
  ignore_errors: yes
  tags:
    - nginx

- name: enable nginx
  service:
    name: nginx
    state: started
    enabled: yes
  notify: update permissions
  tags:
    - nginx

# - name: create strong DH group for nginx
#   command: openssl dhparam -out /etc/nginx/ssl/dhparams.pem 2048 creates=/etc/nginx/ssl/dhparams.pem
#   notify:
#     - configtest nginx
#     - reload nginx
#   tags:
#     - nginx
#     - ssl

- name: nginx auto reload via cron
  cron:
    name: nginx auto reload
    minute: 8
    hour: 3
    day: 26
    job: "nginx -s reload >/dev/null 2>&1"
  tags:
    - nginx

- name: add nginx logrotate for custom locations
  lineinfile: dest=/etc/logrotate.d/nginx
              insertbefore="\/var\/log\/nginx\/\*\.log"
              line="/srv/www/*/logs/*.log"
  tags:
    - nginx
    - logrotate

# This can now be removed since I use `/dev/shm` for better performance.
- name: create nginx cache (proxy_cache_path) directory
  file:
    path: /var/cache/nginx/proxy_cache/
    state: directory
  tags:
    - nginx
    - nginx_config

- name: create nginx deny-hosts for fail2ban
  file:
    path: /etc/nginx/conf.d/deny-hosts
    state: touch
    modification_time: preserve
    access_time: preserve
    owner: nginx
    group: nginx
  changed_when: false
  tags:
    - nginx
    - fail2ban

- name: create site public directories
  file:
    path: /srv/www/{{ item }}/public_html/
    state: directory
  with_items: "{{ nginx_sites[inventory_hostname] | default([]) }}"
  tags:
    - nginx
    - nginx_sites
    - nginx_config

- name: create site log directories
  file:
    path: /srv/www/{{ item }}/logs/
    state: directory
  with_items: "{{ nginx_sites[inventory_hostname] | default([]) }}"
  tags:
    - nginx
    - nginx_sites
    - nginx_config

- name: sync nginx configs
  synchronize:
    src: nginx/
    dest: /etc/nginx/
  notify:
    - configtest nginx
    - reload nginx
  tags:
    - nginx
    - nginx_config
    - nginx_config_only

- name: sync nginx configs (playbook user override)
  synchronize:
    src: "{{ inventory_dir }}/files/nginx/"
    dest: /etc/nginx/
  notify:
    - configtest nginx
    - reload nginx
  tags:
    - nginx
    - nginx_config
    - nginx_config_only

- name: check if site config exists
  local_action: stat path={{ inventory_dir }}/files/nginx-sites/{{ inventory_hostname }}/
  register: site_config
  tags:
    - nginx
    - nginx_config
    - nginx_sites
    - nginx_sites_only
    - debug

- name: site config warning
  debug:
    msg: |
      Nginx site configs do not exists! please create your own configs in
        {{ inventory_dir }}/files/nginx-sites/{{ inventory_hostname }}/*.conf
  when: not site_config.stat.exists
  tags:
    - nginx
    - nginx_config
    - nginx_sites
    - nginx_sites_only
    - debug

- name: sync nginx site configs
  synchronize:
    src: nginx-sites/{{ inventory_hostname }}/
    dest: /etc/nginx/sites/
  when: site_config.stat.exists
  notify:
    - update permissions
    - configtest nginx
    - reload nginx
  tags:
    - nginx
    - nginx_config
    - nginx_sites
    - nginx_sites_only

- name: check if upstream config exists
  local_action: stat path={{ inventory_dir }}/files/nginx-upstreams/{{ inventory_hostname }}/
  register: upstream_config
  tags:
    - nginx
    - nginx_config
    - nginx_upstreams
    - debug

- name: upstream config warning
  debug:
    msg: |
      Nginx upstream configs do not exists! please create your own configs in
        {{ inventory_dir }}/files/nginx-upstreams/{{ inventory_hostname }}/*.conf
  when: not upstream_config.stat.exists
  tags:
    - nginx
    - nginx_config
    - nginx_upstreams
    - debug

- name: sync nginx upstream configs
  synchronize:
    src: nginx-upstreams/{{ inventory_hostname }}/
    dest: /etc/nginx/upstreams/
  when: upstream_config.stat.exists
  notify:
    - update permissions
    - configtest nginx
    - reload nginx
  tags:
    - nginx
    - nginx_config
    - nginx_upstreams

# TODO: I never use Nginx stream mode (TCP load balancing), so disable for now
# - name: sync nginx stream configs
#   synchronize:
#     src: nginx-streams/{{ inventory_hostname }}/
#     dest: /etc/nginx/streams/
#   notify:
#     - configtest nginx
#     - reload nginx
#   tags:
#     - nginx
#     - nginx_config
#     - nginx_streams

#
# setup ssls
#
# TODO: use native method when it's stable
# DATE: Jan 10, 2018, 9:34 PM
# - name: install pyopenssl (self-signed cert requirements)
#   pip:
#     name: pyopenssl
#     state: latest
#   tags:
#     - ssl
#     - sslss
#
# - name: generate a self-signed cert
#   openssl_certificate:
#     path: /etc/nginx/ssl/localhost.crt
#     privatekey_path: /etc/nginx/ssl/localhost.key
#     csr_path: /etc/nginx/ssl/localhost.csr
#     provider: selfsigned
#   tags:
#     - ssl
#     - sslss

- name: create ssl directory
  file:
    path: /etc/nginx/ssl/
    state: directory
  tags:
    - ssl

- name: check self-signed cert expiration
  command: openssl x509 -checkend 2592000 -noout -in /etc/nginx/ssl/localhost.crt
  register: self_cert_check
  changed_when: self_cert_check.rc != 0
  failed_when: self_cert_check.stdout_lines|length > 0
  tags:
    - ssl

- name: generate a self-signed cert
  command: openssl req -x509 -nodes -days 365 -newkey ec -pkeyopt ec_paramgen_curve:secp384r1 -subj "/C=US/ST=Delaware/L=Newark/O=Sparanoid, Inc./OU=DevOps/CN=localhost" -keyout /etc/nginx/ssl/localhost.key -out /etc/nginx/ssl/localhost.crt
  when: self_cert_check.rc != 0
  tags:
    - ssl

- name: check if site ssl exists
  local_action: stat path={{ inventory_dir }}/files/ssl/{{ inventory_hostname }}/
  register: site_ssl
  tags:
    - ssl

- name: site ssl warning
  debug:
    msg: |
      Nginx site configs do not exists! please create your own configs in
        {{ inventory_dir }}/files/ssl/{{ inventory_hostname }}/*.{crt,key}
  when: not site_ssl.stat.exists
  tags:
    - ssl

- name: sync nginx site ssl
  synchronize:
    src: ssl/{{ inventory_hostname }}/
    dest: /etc/nginx/ssl/
  when: site_ssl.stat.exists
  notify:
    - configtest nginx
    - reload nginx
  tags:
    - ssl

- name: sync ssl ca roots
  synchronize:
    src: ssl-base/
    dest: /etc/nginx/ssl/
  notify:
    - configtest nginx
    - reload nginx
  tags:
    - ssl
