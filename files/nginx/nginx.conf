# nginx Configuration File
# http://wiki.nginx.org/Configuration

# CHEATSHEET
# Original by http://biowikifarm.net/meta/Nginx_Installation_and_Configuration
#
# LOCATIONS
#
# Syntax:
# location [ = | ^~ | ~ | ~* ] uri { ... }
# location @name { … }
#
# Context:
# server, location
#
# Check order:
#   (1) location =  string-uri { … }  exact, identical match (stop further searching)
#   (2) location ^~ string-uri { … }  match beginning with (stop further searching)
#   (3) location ~  regex-uri  { case sensitive }   ┬ executed in order of appearance
#   (3) location ~* regex-uri  { case insensitive } ┘
#   (4) location    string-uri { … }
#
# The order in which location directives are checked is as follows:
# (1) Directives with the "=" prefix that match the query exactly (literal string). If found, searching stops.
# (2) All "^~" prefixed locations with conventional strings. If it matches, searching stops.
# (3) Regular expressions, in the order they are defined in the configuration file.
# (4) All remaining directives with conventional strings, “most specific“ strings are executed:
#     1. location /w/ { … }
#     2. location /w/images/details/ { … }
#     3. location /w/images/a/ { … }
#
#              Examples of requests:   “/”     “/documents/document.html”   “/documents/1.jpg”
#                                       │ “/index.html”  │  “/images/1.gif”       │
# location = / {                        │      │         │         │              │  ← rank check order (1): matches the query / only
#   [ configuration A ]               ←─┘      │         │         │              │
# }                                            │         │         │              │
# location / {                                 │         │         │              │  ← rank check order (4): matches any query
#   [ configuration B ]               ←────────┘         │         │              │    but regular expressions and any longer
# }                                                      │         │              │    conventional blocks will be matched first
# location /documents/ {                                 │         │              │  ← rank check order (4)
#   [ configuration C ]               ←──────────────────┘         │              │
# }                                                                │              │
# location ^~ /images/ {                                           │              │  ← rank check order (2): matches any query beginning with /images/
#   [ configuration D ]               ←────────────────────────────┘              │    and halts searching, so regular expressions will not be checked.
# }                                                                               │
# location ~* \.(gif|jpg|jpeg)$ {                                                 │  ← rank check order (3): matches any case insensitive request ending in gif, jpg, or jpeg
#   [ configuration E ]               ←───────────────────────────────────────────┘    except for those beginning with /images/ (=configuration D)
# }                                   (not to C, because regex is executed before)
#
#
# REWRITE, TRY_FILES
#
# Syntax:
# rewrite regex replacement [flag];
#
# Context: server, location, if
#
# Check order rules:
#  * executed in order of appearance
#  * [flag] can terminate further processing of the directives
#     ├→ last      → stops processing the current set of ngx_http_rewrite_module directives and starts a search for a new location matching the changed URI;
#     ├→ break     → stops processing the current set of ngx_http_rewrite_module directives as with the break directive;
#     ├→ redirect  → returns a temporary redirect (302 code); used if a replacement string does not start with “http://” or “https://”.
#     └→ permanent → returns a permanent redirect (301 code)
#  * “http://” or “https://” begins the rewrite: the processing stops and the redirect is returned to a client
#
# Examples (see also http://wiki.nginx.org/Pitfalls)
# location / {
#   # Redirect domain-only access (= no path given, w/o or with /) to default wiki:
#   # 302 → temporary redirect
#   # 301 → permanent redirect
#   return 301 "^[/]?$" /web/;
# }
# location ^~ /web/ {
#   try_files $uri $uri/ @do_wikipage; # if it fails try named location block @do_wikipage
# }
# location @do_wikipage {   # try as wiki page:
#   rewrite "^/web/?(.+)$" /w/index.php?title=$1&args redirect;  #(wiki reports 404 for non-existing pages! But can be created)
# }
#
#
# VIRTUAL HOSTS
# Virtual host configurations are in /etc/nginx/sites-available They are linked from /etc/nginx/sites-enabled
# The default configuration file (containing biowikifarm.net) is /etc/nginx/sites-available/00-default
# This file is linked from /etc/nginx/sites-enabled/default
# Each domain on biowikifarm (other than biowikifarm.net) has its own configuration file in sites-available. To create a new configuration, make a copy of default.dpkg-dist. To enable the domain, link it from sites-enabled. To test if the configuration is OK, run
#
# sudo nginx -t
# sudo nginx -t -c /etc/nginx/nginx.conf # test a specific configuration file
#
# Changes will take effect after you restart nginx.
# The "old" configuration files (2014.12.05) are now in /etc/nginx/sites-available-backup
#
# end-of-cheatsheet
#


# Run as a less privileged user for security reasons.
user nginx;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 100000;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;

  # epoll is preferred on 2.6 Linux kernels. Cf. http://www.kegel.com/c10k.html#nb.epoll
  use epoll;

  # Accept as many connections as possible.
  multi_accept on;
}

# Default error log file
# (this is only used when you don't override error_log on a server{} level)
# error_log /var/log/nginx/error.log crit;
error_log /var/log/nginx/error.log error;
# error_log /var/log/nginx/error.log warn;
# error_log /var/log/nginx/error.log notice;
# error_log /var/log/nginx/error.log info;

pid /var/run/nginx.pid;

http {

  # Hide nginx version information.
  server_tokens off;

  # Define the MIME types for files.
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Update charset_types due to updated mime.types
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

  # Format to use in log files
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  log_format simple '$remote_addr [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_x_forwarded_for"';

  log_format fail2ban '$remote_addr [$time_local] "$request"';

  # Log switchers
  # access_log              /var/log/nginx/access.log main;
  log_not_found           off;
  access_log              off;

  # Timeouts. set them to 5s to help mitigate attacks like the Slowloris DoS attack
  client_body_timeout     10s;
  client_header_timeout   10s;
  send_timeout            15s;
  keepalive_timeout       300s;

  # Reset lingering timed out connections. Deflect DDoS.
  reset_timedout_connection on;

  # Body size.
  client_max_body_size    16m;

  # Enable sendfile
  sendfile                on;
  tcp_nopush              on;
  tcp_nodelay             on;

  # Gzip configurations
  gzip                    on;
  gzip_comp_level         5;
  gzip_http_version       1.1;
  gzip_min_length         50;
  gzip_buffers            16 8k;
  gzip_proxied            any;
  gzip_disable            "MSIE [1-6]\.";
  gzip_vary               on;
  gzip_types              application/atom+xml
                          application/javascript
                          application/json
                          application/rss+xml
                          application/vnd.ms-fontobject # EOT
                          application/x-font-ttf
                          application/x-web-app-manifest+json
                          application/xhtml+xml
                          application/xml
                          application/x-javascript
                          font/opentype
                          font/otf
                          font/truetype
                          font/ttf
                          image/svg+xml
                          image/x-icon
                          text/css
                          # text/html is enabled by default, uncomment this will cause nginx warning
                          text/xml
                          text/javascript
                          text/plain
                          text/x-component;

  # Serve already compressed files directly, bypassing on-the-fly compression.
  gzip_static             on;

  # Set default charset
  charset                 utf-8;

  # Set default index file, still useful when nginx functions as a normal web server
  index                   index.html index.htm index.xml index.php;

  # Resolvers for upstream servers, OCSP Stapling
  resolver                8.8.8.8 8.8.4.4 216.146.35.35 216.146.36.36 valid=300s;
  resolver_timeout        5s;

  # Expire rules for static content
  # http://nginx.org/en/docs/http/ngx_http_headers_module.html
  map $sent_http_content_type $cache_control_headers {
    default                                          2m;

    ~text/css                                         1y;
    ~text/xml                                         -1;

    ~application/javascript                           1y;
    ~application/atom+xml                             1h;
    ~application/rss+xml                              1h;
    ~application/xml                                  1h;
    ~application/json                                 -1;
    ~application/vnd.api+json                         -1;
    ~application/pdf                                  1M;

    ~application/                                    1M;
    ~font/                                           1M;
    ~image/                                          1M;
    ~audio/                                          1M;
    ~video/                                          1M;
  }
  # NOTE: Set expires header in specific locations
  # expires $cache_control_headers;

  # Referrer-Policy header map for only HTML
  map $sent_http_content_type $referrer_policy_headers {
    default         "";
    ~text/html       "strict-origin-when-cross-origin";
  }

  # Feature-Policy header map for only HTML
  map $sent_http_content_type $feature_policy_headers {
    default         "";
    ~text/html       "accelerometer 'none'; camera 'self'; geolocation 'self'; gyroscope 'self'; magnetometer 'none'; microphone 'self'; payment 'self'; usb 'none'";
  }

  # Content-Security-Policy header map for only HTML
  # NOTE: The following config have to be redinfed in your own site config if
  # you'd like to override it.
  map $sent_http_content_type $content_security_policy_headers {
    default         "";
    ~text/html       "default-src * data: 'unsafe-inline' 'unsafe-eval'";
  }

  # Define a zone for limiting the number of simultaneous
  # connections nginx accepts. 1m means 32000 simultaneous
  # sessions. We need to define for each server the limit_conn
  # value refering to this or other zones.
  # ** This syntax requires nginx version >=
  # ** 1.1.8. Cf. http://nginx.org/en/CHANGES. If using an older
  # ** version then use the limit_zone directive below
  # ** instead. Comment out this
  # ** one if not using nginx version >= 1.1.8.
  limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
  limit_conn_status         444;

  # Maps ip address to $limit variable if request is of type POST
  map $request_method $post_limit_map {
    default         "";
    POST            $binary_remote_addr;
  }

  limit_req_zone $post_limit_map zone=post_limit:10m rate=3r/s;
  limit_req_zone $post_limit_map zone=post_limit_mid:10m rate=6r/s;
  limit_req_zone $post_limit_map zone=post_limit_high:10m rate=9r/s;
  limit_req_zone $binary_remote_addr zone=request_limit:10m rate=3r/s;
  limit_req_zone $binary_remote_addr zone=request_limit_mid:10m rate=6r/s;
  limit_req_zone $binary_remote_addr zone=request_limit_high:10m rate=9r/s;
  limit_req_status          444;

  # Set the OS file cache.
  open_file_cache           max=100000 inactive=20s;
  open_file_cache_valid     45s;
  open_file_cache_min_uses  1;
  open_file_cache_errors    off;

  # SSL settings
  # References:
  # http://nginx.org/en/docs/http/configuring_https_servers.html
  # http://nginx.org/pipermail/nginx/2010-November/023736.html.
  # https://calomel.org/nginx.html

  # Old and deprecated
  # ssl_ciphers                AES256-SHA:AES256-SHA256;
  # ssl_ciphers                ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH;

  # RSA ciphers
  # ssl_ciphers                ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA;

  # ECDSA ssl ciphers; google chrome prefered order, 128bit most prefered
  #ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA;

  # Sparanoid hand-picked cipher suits for simpler and better scores on Qualys SSL Labs
  # ECDHE-ECDSA-AES128-GCM-SHA256 must be present for http2:
  # Ref: https://http2.github.io/http2-spec/#rfc.section.9.2.2

  # ECDSA
  # ssl_ciphers                ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA;

  # RSA
  ssl_ciphers                ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

  ssl_prefer_server_ciphers  on;
  # Disable TLSv1 can mitigate BEAST attack server-side
  ssl_protocols              TLSv1.2;
  ssl_session_cache          shared:SSL:50m;
  ssl_session_timeout        1d;
  ssl_buffer_size            1400; # 1400 bytes to fit in one MTU

  # Better session tickets with custom key file:
  # $ openssl rand 80 > session_ticket.key
  # https://github.com/mozilla/server-side-tls/issues/135
  ssl_session_tickets        on;
  ssl_session_ticket_key     /etc/nginx/session_ticket.key;

  # strong DH group
  # https://weakdh.org/
  ssl_dhparam                /etc/nginx/ssl/dhparams.pem;

  # TODO: Oct 1, 2015, 9:12 PM
  # secp521r1 causes Chrome (v45) timed out
  # ssl_ecdh_curve             secp384r1;

  # Upstream to abstract backend connection(s) for PHP
  upstream php_fpm_backend {
    server                127.0.0.1:9000;
    # server                unix:/var/run/php-fpm-www1.sock;
    # server                192.184.94.125:9000;
    # keepalive             32;
  }

  # NOTE: Disable multiple pools support since we switched from sock to TCP listen.
  # upstream php_fpm_backend_alt {
  #   server                unix:/var/run/php-fpm-www1.sock;
  #   # server                192.184.94.125:9000;
  #   # keepalive             32;
  # }

  # The upstream apache server. In this case Nginx functions as a reverse proxy.
  # You can have many of these and weight them accordingly,
  # allowing nginx to function as a caching load balancer.
  # upstream backend {
  #   server                127.0.0.1:8020 weight=1 fail_timeout=120s;
  # }

  # load specified upstream confs
  include upstreams/*.conf;

  # IMPORTANT - this sets the basic cache key that's used in the static file cache.
  # proxy_cache_key "$scheme://$host$request_uri";
  # proxy_cache_key "$scheme$host$request_uri";
  proxy_cache_key         "$scheme$host$request_uri";

  # This shows you a few ways you can tweak your caching policies by inspecting URLs.
  # The most important rule is to leave admin-looking URLs uncached, otherwise you won't be able to log in.
  # From there, please feel free to set longer or shorter cache times based on your particular traffic.
  # set some parameters: two levels deep for the filesystem
  proxy_cache_path        /dev/shm/nginx_proxy_cache levels=1:2
                          keys_zone=main:10m
                          inactive=24h max_size=1g;
  proxy_temp_path         /dev/shm/nginx_proxy_temp;
  # Set this to 60s for websites with long pulling method
  proxy_connect_timeout   60s;
  proxy_read_timeout      300s;
  proxy_send_timeout      300s;

  # Cache valid settings
  # NOTE: Set proxy cache in specific locations
  # proxy_cache_valid       200 302 10m;
  # proxy_cache_valid       301 10m;
  # proxy_cache_valid       any 1m;

  # FastCGI cache settings
  # Usage in directives:
  # fastcgi_cache         main_fastcgi;
  # fastcgi_cache_valid   200 10m;
  # fastcgi_cache_valid   any 1m;
  fastcgi_cache_path /dev/shm/nginx_fastcgi_cache levels=1:2 keys_zone=main_fastcgi:100m inactive=60m;
  fastcgi_cache_key $scheme$request_method$host$request_uri;
  fastcgi_cache_use_stale error updating timeout;

  # Nginx status for Linode Longview
  server {
    listen                127.0.0.1:80;
    server_name           127.0.0.1;
    allow                 127.0.0.1;
    deny                  all;

    location /nginx_status {
      stub_status         on;
    }
  }

  # Default server to prevent processing requests with undefined server names
  # http://nginx.org/en/docs/http/request_processing.html#how_to_prevent_undefined_server_names
  server {
    listen                80       default_server;
    listen                [::]:80  default_server;

    listen                443      ssl http2 default_server;
    listen                [::]:443 ssl http2 default_server;

    ssl_certificate       /etc/nginx/ssl/localhost.crt;
    ssl_certificate_key   /etc/nginx/ssl/localhost.key;

    server_name           "";
    return                444;
  }

  # load specified site confs
  include sites/*.conf;

  # load config files from the /etc/nginx/conf.d directory
  # it is the default path but we won't touch it, so disable it
  # include /etc/nginx/conf.d/*.conf;
}

# stream {
#   # load specified stream confs
#   include streams/*.conf;
# }
